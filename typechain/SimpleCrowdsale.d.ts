/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SimpleCrowdsaleInterface extends ethers.utils.Interface {
  functions: {
    "crowdSaleToken()": FunctionFragment;
    "endTime()": FunctionFragment;
    "invest()": FunctionFragment;
    "investmentAmountOf(address)": FunctionFragment;
    "investmentReceived()": FunctionFragment;
    "investmentRefunded()": FunctionFragment;
    "isFinalized()": FunctionFragment;
    "isRefundingAllowed()": FunctionFragment;
    "owner()": FunctionFragment;
    "startTime()": FunctionFragment;
    "weiInvestimentObjective()": FunctionFragment;
    "weiTokenPrice()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "crowdSaleToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "invest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "investmentAmountOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investmentRefunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRefundingAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "weiInvestimentObjective",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weiTokenPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "crowdSaleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investmentAmountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investmentReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investmentRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRefundingAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weiInvestimentObjective",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weiTokenPrice",
    data: BytesLike
  ): Result;

  events: {
    "LogInvestment(address,uint256)": EventFragment;
    "LogTokenAssignment(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogInvestment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenAssignment"): EventFragment;
}

export class SimpleCrowdsale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SimpleCrowdsaleInterface;

  functions: {
    crowdSaleToken(overrides?: CallOverrides): Promise<[string]>;

    "crowdSaleToken()"(overrides?: CallOverrides): Promise<[string]>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "endTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    invest(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "invest()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    investmentAmountOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "investmentAmountOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    investmentReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    "investmentReceived()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    investmentRefunded(overrides?: CallOverrides): Promise<[BigNumber]>;

    "investmentRefunded()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isFinalized(overrides?: CallOverrides): Promise<[boolean]>;

    "isFinalized()"(overrides?: CallOverrides): Promise<[boolean]>;

    isRefundingAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    "isRefundingAllowed()"(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    weiInvestimentObjective(overrides?: CallOverrides): Promise<[BigNumber]>;

    "weiInvestimentObjective()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    weiTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "weiTokenPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  crowdSaleToken(overrides?: CallOverrides): Promise<string>;

  "crowdSaleToken()"(overrides?: CallOverrides): Promise<string>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  invest(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "invest()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  investmentAmountOf(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "investmentAmountOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  investmentReceived(overrides?: CallOverrides): Promise<BigNumber>;

  "investmentReceived()"(overrides?: CallOverrides): Promise<BigNumber>;

  investmentRefunded(overrides?: CallOverrides): Promise<BigNumber>;

  "investmentRefunded()"(overrides?: CallOverrides): Promise<BigNumber>;

  isFinalized(overrides?: CallOverrides): Promise<boolean>;

  "isFinalized()"(overrides?: CallOverrides): Promise<boolean>;

  isRefundingAllowed(overrides?: CallOverrides): Promise<boolean>;

  "isRefundingAllowed()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  weiInvestimentObjective(overrides?: CallOverrides): Promise<BigNumber>;

  "weiInvestimentObjective()"(overrides?: CallOverrides): Promise<BigNumber>;

  weiTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "weiTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    crowdSaleToken(overrides?: CallOverrides): Promise<string>;

    "crowdSaleToken()"(overrides?: CallOverrides): Promise<string>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    invest(overrides?: CallOverrides): Promise<void>;

    "invest()"(overrides?: CallOverrides): Promise<void>;

    investmentAmountOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "investmentAmountOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investmentReceived(overrides?: CallOverrides): Promise<BigNumber>;

    "investmentReceived()"(overrides?: CallOverrides): Promise<BigNumber>;

    investmentRefunded(overrides?: CallOverrides): Promise<BigNumber>;

    "investmentRefunded()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFinalized(overrides?: CallOverrides): Promise<boolean>;

    "isFinalized()"(overrides?: CallOverrides): Promise<boolean>;

    isRefundingAllowed(overrides?: CallOverrides): Promise<boolean>;

    "isRefundingAllowed()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    weiInvestimentObjective(overrides?: CallOverrides): Promise<BigNumber>;

    "weiInvestimentObjective()"(overrides?: CallOverrides): Promise<BigNumber>;

    weiTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "weiTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    LogInvestment(
      from: string | null,
      value: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; value: BigNumber }
    >;

    LogTokenAssignment(
      from: string | null,
      numToken: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; numToken: BigNumber }
    >;
  };

  estimateGas: {
    crowdSaleToken(overrides?: CallOverrides): Promise<BigNumber>;

    "crowdSaleToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    invest(overrides?: PayableOverrides): Promise<BigNumber>;

    "invest()"(overrides?: PayableOverrides): Promise<BigNumber>;

    investmentAmountOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "investmentAmountOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investmentReceived(overrides?: CallOverrides): Promise<BigNumber>;

    "investmentReceived()"(overrides?: CallOverrides): Promise<BigNumber>;

    investmentRefunded(overrides?: CallOverrides): Promise<BigNumber>;

    "investmentRefunded()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    "isFinalized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isRefundingAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    "isRefundingAllowed()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    weiInvestimentObjective(overrides?: CallOverrides): Promise<BigNumber>;

    "weiInvestimentObjective()"(overrides?: CallOverrides): Promise<BigNumber>;

    weiTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "weiTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    crowdSaleToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crowdSaleToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invest(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "invest()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    investmentAmountOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "investmentAmountOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investmentReceived(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "investmentReceived()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investmentRefunded(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "investmentRefunded()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isFinalized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRefundingAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRefundingAllowed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weiInvestimentObjective(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "weiInvestimentObjective()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weiTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weiTokenPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
